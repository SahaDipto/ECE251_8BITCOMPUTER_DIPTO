$date
	Sat May 14 02:22:02 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu $end
$var wire 8 ! outputofmem [7:0] $end
$var wire 1 " writetomem $end
$var wire 2 # storedflag [1:0] $end
$var wire 3 $ shiftamt [2:0] $end
$var wire 1 % ret0 $end
$var wire 1 & regwrite $end
$var wire 8 ' regB [7:0] $end
$var wire 8 ( regA [7:0] $end
$var wire 8 ) pc [7:0] $end
$var wire 3 * opcode2 [2:0] $end
$var wire 4 + opcode [3:0] $end
$var wire 1 , muxsel $end
$var wire 1 - jumpenable $end
$var wire 16 . instruction [15:0] $end
$var wire 8 / databuffer [7:0] $end
$var wire 8 0 data [7:0] $end
$var wire 8 1 constant [7:0] $end
$var wire 1 2 bufenable $end
$var wire 2 3 aluflag [1:0] $end
$var wire 8 4 alubuffer [7:0] $end
$var wire 8 5 aluOut [7:0] $end
$var wire 2 6 Rs2 [1:0] $end
$var wire 2 7 Rs1 [1:0] $end
$var wire 2 8 Rm [1:0] $end
$var reg 1 9 clk $end
$scope module alu1 $end
$var wire 2 : flags [1:0] $end
$var wire 3 ; shiftamt [2:0] $end
$var wire 4 < opcase [3:0] $end
$var wire 8 = B [7:0] $end
$var wire 8 > A [7:0] $end
$var reg 2 ? cmpflag [1:0] $end
$var reg 8 @ cmpreg [7:0] $end
$var reg 8 A out1 [7:0] $end
$upscope $end
$scope module buf1 $end
$var wire 8 B in1 [7:0] $end
$var wire 1 2 enable $end
$var reg 8 C hold [7:0] $end
$upscope $end
$scope module dataram256 $end
$var wire 8 D data [7:0] $end
$var wire 1 " we $end
$var wire 8 E datain [7:0] $end
$var wire 1 F dataOut $end
$var wire 1 " clk $end
$var wire 8 G addr [7:0] $end
$upscope $end
$scope module immediatemux $end
$var wire 1 H sel $end
$var wire 8 I inB [7:0] $end
$var wire 8 J inA [7:0] $end
$var reg 8 K out [7:0] $end
$upscope $end
$scope module instrucdecoder $end
$var wire 3 L shiftamt [2:0] $end
$var wire 3 M opcode2 [2:0] $end
$var wire 4 N opcode [3:0] $end
$var wire 16 O instruction [15:0] $end
$var wire 8 P constant [7:0] $end
$var wire 2 Q Rs2 [1:0] $end
$var wire 2 R Rs1 [1:0] $end
$var wire 2 S Rm [1:0] $end
$upscope $end
$scope module instructionmemory $end
$var wire 16 T instruc [15:0] $end
$var wire 8 U inA [7:0] $end
$upscope $end
$scope module maincontroller $end
$var wire 1 2 be $end
$var wire 1 9 clk $end
$var wire 16 V instruction [15:0] $end
$var wire 1 - je $end
$var wire 1 " memwrite $end
$var wire 1 , mmuxsel $end
$var wire 1 % re0 $end
$var wire 1 & rw $end
$var wire 8 W pc [7:0] $end
$var wire 2 X flags [1:0] $end
$var reg 1 Y bufenable $end
$var reg 1 Z jumpenable $end
$var reg 1 [ muxsel $end
$var reg 8 \ programcounter [7:0] $end
$var reg 1 ] regwrite $end
$var reg 1 ^ ret0 $end
$var reg 1 _ writetomem $end
$upscope $end
$scope module memorymux $end
$var wire 8 ` inA [7:0] $end
$var wire 8 a inB [7:0] $end
$var wire 1 , sel $end
$var reg 8 b out [7:0] $end
$upscope $end
$scope module regis $end
$var wire 8 c A [7:0] $end
$var wire 8 d B [7:0] $end
$var wire 8 e data [7:0] $end
$var wire 2 f flags [1:0] $end
$var wire 2 g outflags [1:0] $end
$var wire 2 h outselA [1:0] $end
$var wire 2 i outselB [1:0] $end
$var wire 2 j selwrite [1:0] $end
$var wire 1 & we $end
$var reg 8 k A1 [7:0] $end
$var reg 8 l B1 [7:0] $end
$var reg 2 m holdflag [1:0] $end
$var reg 8 n reg0 [7:0] $end
$var reg 8 o reg1 [7:0] $end
$var reg 8 p reg2 [7:0] $end
$var reg 8 q reg3 [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 q
b0 p
b0 o
b0 n
bx m
b0 l
b0 k
b0 j
b0 i
b0 h
bx g
bx f
bz e
b0 d
b0 c
b11111111 b
b11111111 a
bz `
0_
0^
0]
b11111111 \
0[
0Z
0Y
bx X
b11111111 W
b0 V
b11111111 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
0H
b0 G
0F
b0 E
bz D
bz C
b11111111 B
b11111111 A
bx @
bx ?
b0 >
b0 =
b0 <
b0 ;
bx :
09
b0 8
b0 7
b0 6
b11111111 5
b0 4
bx 3
02
b0 1
b11111111 0
bz /
b0 .
0-
0,
b0 +
b0 *
b11111111 )
b0 (
b0 '
0&
0%
b0 $
bx #
0"
bz !
$end
#10
b11000000 0
b11000000 B
b11000000 b
xF
b11000000 4
b11000000 =
b11000000 K
1H
b11000000 5
b11000000 A
b11000000 a
b11000000 /
b11000000 C
b11000000 e
b10 *
b10 M
b11000000 1
b11000000 G
b11000000 J
b11000000 P
b11 6
b11 Q
b11 i
b1 8
b1 S
b1 j
b1100 +
b1100 <
b1100 N
12
1Y
b1100010011000000 .
b1100010011000000 O
b1100010011000000 T
b1100010011000000 V
b0 )
b0 U
b0 W
b0 \
19
#12
b11000000 o
1&
1]
#14
bz /
bz C
bz e
02
0Y
0&
0]
#20
09
#30
bz 0
bz B
bz b
b1 4
b1 =
b1 K
b11000000 (
b11000000 >
b11000000 E
b11000000 c
b11000000 k
b11 #
b11 X
b11 g
b11 m
b11 3
b11 :
b11 f
b11 ?
b1 @
bz 5
bz A
bz a
bz /
bz C
bz e
b0 *
b0 M
b1 1
b1 G
b1 J
b1 P
b0 6
b0 Q
b0 i
b1 7
b1 R
b1 h
b0 8
b0 S
b0 j
b1011 +
b1011 <
b1011 N
12
1Y
b1011000100000001 .
b1011000100000001 O
b1011000100000001 T
b1011000100000001 V
b1 )
b1 U
b1 W
b1 \
19
#32
bz '
bz I
bz d
bz l
bz n
1&
1]
#34
02
0Y
0&
0]
#40
09
#50
b11111111 0
b11111111 B
b11111111 b
0F
bz 4
bz =
bz K
b0 (
b0 >
b0 E
b0 c
b0 k
0H
b11111111 5
b11111111 A
b11111111 a
b111 *
b111 M
b0 1
b0 G
b0 J
b0 P
b10 7
b10 R
b10 h
b11 8
b11 S
b11 j
b0 +
b0 <
b0 N
b111000000000 .
b111000000000 O
b111000000000 T
b111000000000 V
b10 )
b10 U
b10 W
b10 \
19
#60
09
#70
b11 )
b11 U
b11 W
b11 \
19
#80
09
#90
b100 )
b100 U
b100 W
b100 \
19
#100
09
#110
bx 0
bx B
bx b
bx 5
bx A
bx a
bz (
bz >
bz E
bz c
bz k
b0 *
b0 M
b0 7
b0 R
b0 h
b0 8
b0 S
b0 j
1%
1^
b0 .
b0 O
b0 T
b0 V
b101 )
b101 U
b101 W
b101 \
19
#120
09
#130
b110 )
b110 U
b110 W
b110 \
19
